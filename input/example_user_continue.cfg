name = "default";
param = ( 
  {
    type = "string";
    name = "prog_id";
    comment = "An identification name for this run";
    value = "example";
  }, 
  {
    type = "string";
    name = "output_dir";
    comment = "Output directory";
    value = "output";
  }, 
  {
    type = "string";
    name = "kin_input";
    comment = "Kinetics input file";
    value = "input/kinetic_example.cfg";
  }, 
  {
    type = "int";
    name = "restart";
    comment = "If restart is 1 (TRUE), the simulation will continue with data from a previous run";
    value = 0;
  }, 
  {
    type = "string";
    name = "load_file";
    comment = "If restart is TRUE, the name of the file with data from previous run, otherwise empty";
    value = "";
  }, 
  {
    type = "double";
    name = "output_dt";
    comment = "Time interval for output to be written to disk";
    value = 0.1;
  }, 
  {
    type = "int";
    name = "pois_output";
    comment = "Output of the Poisson grids, including the potential?";
    value = 0;
  }, 
  {
    type = "int";
    name = "cdr_output_margin";
    comment = "Margin outside the grids in the output of the cdr equation";
    value = 0;
  }, 
  {
    type = "int";
    name = "pois_output_margin";
    comment = "Margin outside the grids in the output of the poisson equation";
    value = 1;
  }, 
  {
    type = "double";
    name = "warn_min_timestep";
    comment = "If the time steps are smaller than this number, the program issues a warning";
    value = 1e-06;
  }, 
  {
    type = "int";
    name = "max_disk_space_mb";
    comment = "Maximum disk space, in Mb, to use";
    value = 1048576;
  }, 
  {
    type = "int";
    name = "gridpoints_r";
    comment = "Number of R gridpoints at level 0";
    value = 600;
  }, 
  {
    type = "int";
    name = "gridpoints_z";
    comment = "Number of Z gridpoints at level 0";
    value = 600;
  }, 
  {
    type = "int";
    name = "max_ntheta";
    comment = "Number of azimuthal gridcells and modes";
    value = 1;
  }, 
  {
    type = "double";
    name = "start_t";
    comment = "Initial time";
    value = 0.0;
  }, 
  {
    type = "double";
    name = "end_t";
    comment = "End time";
    value = 0.6;
  }, 
  {
    type = "double";
    name = "attempt_dt";
    comment = "Attempted timestep.  The actual timestep may be larger";
    value = 50.0;
  }, 
  {
    type = "int";
    name = "extra_pois_levels";
    comment = "Extra levels for the Poisson solver";
    value = 2;
  }, 
  {
    type = "int";
    name = "max_levels";
    comment = "Maximum level of refinement. Use a big number here";
    value = 64;
  }, 
  {
    type = "double";
    name = "pois_max_error";
    comment = "Error threshold that leads to refinement in the Poisson code.";
    value = 0.001;
  }, 
  {
    type = "int";
    name = "pois_max_level";
    comment = "Maximum level of refinement in the Poisson equation.";
    value = 3;
  }, 
  {
    type = "int";
    name = "extra_photo_levels";
    comment = "Extra levels for the photo-ionization solver";
    value = -1;
  }, 
  {
    type = "int";
    name = "photo_max_level";
    comment = "Maximum level of refinement in the photo-ionization solver.";
    value = 4;
  }, 
  {
    type = "double";
    name = "photo_max_error";
    comment = "Error threshold that leads to refinement in the photo-ionization code.";
    value = 0.01;
  }, 
  {
    type = "int";
    name = "photo_bnd_right";
    comment = "Photo-ionization boundary condition at r = L_r.  1 for Hom. Neumann, -1 for Hom. Dirichlet";
    value = -1;
  }, 
  {
    type = "int";
    name = "photo_bnd_bottom";
    comment = "Photo-ionization boundary condition at z = 0.  1 for Hom. Neumann, -1 for Hom. Dirichlet";
    value = -1;
  }, 
  {
    type = "int";
    name = "photo_bnd_top";
    comment = "Photo-ionization boundary condition at z = L_z.  1 for Hom. Neumann, -1 for Hom. Dirichlet";
    value = -1;
  }, 
  {
    type = "int";
    name = "extra_photo_levels_2";
    comment = "Extra levels for the photo-ionization solver";
    value = -1;
  }, 
  {
    type = "int";
    name = "photo_max_level_2";
    comment = "Maximum level of refinement in the photo-ionization solver.";
    value = 4;
  }, 
  {
    type = "double";
    name = "photo_max_error_2";
    comment = "Error threshold that leads to refinement in the photo-ionization code.";
    value = 0.01;
  }, 
  {
    type = "int";
    name = "photo_bnd_right_2";
    comment = "Photo-ionization boundary condition at r = L_r.  1 for Hom. Neumann, -1 for Hom. Dirichlet";
    value = -1;
  }, 
  {
    type = "int";
    name = "photo_bnd_bottom_2";
    comment = "Photo-ionization boundary condition at z = 0.  1 for Hom. Neumann, -1 for Hom. Dirichlet";
    value = -1;
  }, 
  {
    type = "int";
    name = "photo_bnd_top_2";
    comment = "Photo-ionization boundary condition at z = L_z.  1 for Hom. Neumann, -1 for Hom. Dirichlet";
    value = -1;
  }, 
  {
    type = "int";
    name = "cdr_bnd_bottom";
    comment = "Particles boundary condition at z = 0.  1 for Hom. Neumann, -1 for Hom. Dirichlet";
    value = 1;
  }, 
  {
    type = "int";
    name = "cdr_bnd_top";
    comment = "Particles boundary condition at z = L_z.  1 for Hom. Neumann, -1 for Hom. Dirichlet";
    value = 1;
  }, 
  {
    type = "int";
    name = "cdr_bnd_right";
    comment = "Particles boundary condition at r = L_r.  1 for Hom. Neumann, -1 for Hom. Dirichlet";
    value = 1;
  }, 
  {
    type = "int";
    name = "pois_bnd_right";
    comment = "Potential boundary condition at r = L_r.  1 for Hom. Neumann, -1 for Hom. Dirichlet";
    value = -1;
  }, 
  {
    type = "int";
    name = "pois_bnd_bottom";
    comment = "Potential boundary condition at z = 0.  1 for Hom. Neumann, -1 for Hom. Dirichlet";
    value = -1;
  }, 
  {
    type = "int";
    name = "pois_bnd_top";
    comment = "Potential boundary condition at z = L_z.  1 for Hom. Neumann, -1 for Hom. Dirichlet";
    value = -1;
  }, 
  {
    type = "double";
    name = "nu_a";
    comment = "Maximum advection Courant number";
    value = 0.2;
  }, 
  {
    type = "double";
    name = "nu_d";
    comment = "Maximum diffusion Courant number";
    value = 0.2;
  }, 
  {
    type = "double";
    name = "nu_rt";
    comment = "Maximum ratio of dt/relaxation time";
    value = 0.2;
  }, 
  {
    type = "double";
    name = "nu_f";
    comment = "Maximum ratio of change of the densities (set to a very large number to ignore)";
    value = 1e+20;
  }, 
  {
    type = "double";
    name = "ref_threshold_eabs";
    comment = "Refinement threshold for the electric field";
    value = 0.2;
  }, 
  {
    type = "int";
    name = "ref_level_eabs";
    comment = "Maximum refinement level reached through ref_threshold_eabs";
    value = 4;
  }, 
  {
    type = "double";
    name = "ref_threshold_charge";
    comment = "Refinement threshold for the curvature of the charge";
    value = 0.004;
  }, 
  {
    type = "double";
    name = "ref_threshold_dens";
    comment = "Refinement threshold for the curvature of the densities";
    value = 0.004;
  }, 
  {
    type = "double";
    name = "ref_threshold_edge";
    comment = "Refinement threshold for the densities in the leading edge";
    value = 10000.0;
  }, 
  {
    type = "int";
    name = "cdr_brick_dr";
    comment = "r-length of the minimal refinement area in the cdr equation";
    value = 8;
  }, 
  {
    type = "int";
    name = "cdr_brick_dz";
    comment = "z-length of the minimal refinement area in the cdr equation";
    value = 8;
  }, 
  {
    type = "int";
    name = "cdr_max_level";
    comment = "Maximum level of refinement in the Fluid equation.";
    value = 3;
  }, 
  {
    type = "int";
    name = "cdr_interp_in";
    comment = "Interpolation method for the grid interior (0=zero_masses, 1=quadratic_masses [default], 2=wackers_masses, 3=quadlog";
    value = 1;
  }, 
  {
    type = "int";
    name = "cdr_interp_bnd";
    comment = "Interpolation method for the grid boundaries (0=zero_masses, 1=quadratic_masses [default], 2=wackers_masses, 3=quadlog";
    value = 1;
  }, 
  {
    type = "double";
    name = "L_r";
    comment = "Length in r of the complete domain";
    value = 13044.0;
  }, 
  {
    type = "double";
    name = "L_z";
    comment = "Length in z of the complete domain";
    value = 13044.0;
  }, 
  {
    type = "double";
    name = "diffusion_coeff";
    comment = "Isotropic difussion coefficient";
    value = 0.1;
  }, 
  {
    type = "int";
    name = "has_photoionization";
    comment = "Whether the code includes photoionization or not";
    value = 1;
  }, 
  {
    type = "string";
    name = "photoionization_file";
    comment = "The name of a file from which we can read the photoionization parameters";
    value = "input/air760torr.photo";
  }, 
  {
    type = "double";
    name = "attachment_rate";
    comment = "Rate of dissociative attachment";
    value = 0.0;
  }, 
  {
    type = "double";
    name = "attachment_E0";
    comment = "E0 in the exp(-E0/E) factor in the attachment expression.";
    value = 0.0;
  }, 
  {
    type = "double";
    name = "E0_x";
    comment = "x component of the external electric field";
    value = 0.0;
  }, 
  {
    type = "double";
    name = "E0_y";
    comment = "y component of the external electric field";
    value = 0.0;
  }, 
  {
    type = "double";
    name = "E0_z";
    comment = "z component of the external electric field";
    value = -0.06;
  }, 
  {
    type = "double";
    name = "rise_time";
    comment = "Rise time of the electric field (0 for instantaneous rise)";
    value = 0.0;
  }, 
  {
    type = "double";
    name = "off_time";
    comment = "Time to switch off the electric field (0.0 means never)";
    value = 0.0;
  }, 
  {
    type = "double";
    name = "seed_sigma_x";
    comment = "x width of the initial seed";
    value = 0.0;
  }, 
  {
    type = "double";
    name = "seed_sigma_y";
    comment = "y width of the initial seed";
    value = 0.0;
  }, 
  {
    type = "double";
    name = "seed_sigma_z";
    comment = "z width of the initial seed";
    value = 0.0;
  }, 
  {
    type = "double";
    name = "seed_N";
    comment = "Number of electrons in the initial seed";
    value = 0.0;
  }, 
  {
    type = "double";
    name = "background_ionization";
    comment = "Initial at z=0 densities of electrons and ions";
    value = 0.0;
  }, 
  {
    type = "double";
    name = "background_increase_length";
    comment = "Length of exponential increase of the pre-ionization (for atmospherical models)";
    value = 0.0;
  }, 
  {
    type = "int";
    name = "pois_inhom";
    comment = "Use the point-plane geometry?";
    value = 1;
  }, 
  {
    type = "int";
    name = "pois_inhom_reflections";
    comment = "Number of mirror charges to use";
    value = 4;
  }, 
  {
    type = "double";
    name = "needle_length";
    comment = "Length of the needle";
    value = 2500.0;
  }, 
  {
    type = "double";
    name = "needle_radius";
    comment = "Radius of the needle";
    value = 400.0;
  }, 
  {
    type = "double";
    name = "pois_inhom_fixed_q";
    comment = "If nonzero, the charge is fixed, not floating (simulation of charged clouds close to the earth surface)";
    value = 0.0;
  }, 
  {
    type = "double";
    name = "constant_source";
    comment = "Constant ionization rate";
    value = 0.0;
  }, 
  {
    type = "double";
    name = "perturb_epsilon";
    comment = "Initial perturbation to the axisymmetric configuration";
    value = 0.0;
  }, 
  {
    type = "int";
    name = "perturb_max_k";
    comment = "Perturb only modes up to perturb_max_k (large number to perturb all)";
    value = 1024;
  }, 
  {
    type = "int";
    name = "sprite_module";
    comment = "1 if the sprite module is activated, 0 otherwise";
    value = 0;
  }, 
  {
    type = "double";
    name = "dens_decay_len";
    comment = "Lenght of exponential decay of the density w/r to altitude";
    value = 0.0;
  }, 
  {
    type = "double";
    name = "sprite_dens_0";
    comment = "Density at z = 0";
    value = 0.0;
  }, 
  {
    type = "double";
    name = "sprite_dens_q";
    comment = "Quenching density";
    value = 0.0;
  }, 
  {
    type = "int";
    name = "sprite_sign";
    comment = "Sign of the sprite head that we are following (the other will not be reliable";
    value = -1;
  } );
